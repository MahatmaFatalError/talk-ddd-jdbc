= Domain Driven Design with relational Databases and Spring Data JDBC.
:icons: font
:twitter-tag: @jensschauder
:conference-tag: #etffm19
:talk-tag: #dddJdbc
:slide-link: http://bit.ly/jsch-comm
:linkattrs:

include::footer.ad[]

== DDD

=== Ubiquitious language.

Important for communicating with customers and co workers

=== Bounded Context.

Large grain modularization.

=== Aggregates and Repositories.

This is what I want to fokus on.

== Lets start with an example.

=== !

Model: Customer + Address + PurchaseOrder + OrderItem + Product + ProductCategory

image::no.jpg[background, size=contain]

=== Everything is connected.

=== Ever tried to test such a model?

=== Imagine 200 Tables

=== !

image: cry

== Aggregates

=== !

Quote: DDD - Eric Evans.

An AGGREGATE is a cluster of associated objects that we treat as a unit

=== What are our Aggregates?

=== !

image

=== Aggregate Root.

Each AGGREGATE has a root [...]. [It] is a single, specific ENTITY contained in the AGGREGATE.
The root is the only member of the AGGREGATE that outside objects are allowed to hold references to.


=== !

image roots sitting at the boundary


=== Aggregates are Boundaries of integrity


== Resourcen

include::self.ad[]


== Material

An AGGREGATE is a cluster of associated objects that we treat as a unit for the purpose of data changes.
Each AGGREGATE has a root and a boundary. The boundary defines what is inside the AGGREGATE. The root is a single, specific ENTITY contained in the AGGREGATE.

The root is the only member of the AGGREGATE that outside objects are allowed to hold references to[.]
